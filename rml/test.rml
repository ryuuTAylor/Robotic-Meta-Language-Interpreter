let _ = println (3 + 3)
let _ = println ()
let _ = println true
let _ = println 4
let _ = println (int_of_string "3")
let _ = println (-3)
let _ = println (3::[])
let _ = println (1, 4)
let _ = println self
let _ = println (fun (x:int) -> x)
let _ = println ((let (x: int) = 3 in (fun (y: int) -> y + x)) 5)
let _ = println (3 + 3)
let _ = println (5 - 3)
let _ = println (3 * 3)
let _ = println (4 / 2)
let _ = println (5 % 2)
let _ = println (true && true)
let _ = println (true || false)
let _ = println (3 < 5)
let _ = println (3 > 5)
let _ = println (3 = 3)
let _ = println (3 <> 3)
let _ = println (3 <= 3)
let _ = println (3 >= 3)
let _ = println ("ha" = "ha")
let _ = println ("ha" <> "ha")
let _ = println ("ha" ^ "ha")
let _ = println (5 |> (fun (x: int) -> x + 37))
let _ = println (5 :: 3 :: 2 :: 1 :: [])
let _ = println (let (x: int ref) = ref 3 in x := 2; !x)
let _ = println (- (5 + 5))
let _ = println (not true)
let _ = println (ref 3)
let _ = println (let (a: int ref) = ref 3 in !a)
let _ = println ((); 5)
let _ = println (match 5 = 5 with | true -> 42 | false -> 0 end)
let _ = println (let rec f (x : int) : int = if x > 0 then x + f(x-1) else 0 in f 4)